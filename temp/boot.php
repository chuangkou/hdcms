<?php if(!defined("PATH_HD")){exit("No direct script access allowed");}define("TEMP_FILE_EXISTS",1);?><?php
 if (!defined("PATH_HD")) exit('No direct script access allowed'); final class App { static private $pathAppGroup; static private $pathApp; static public function run() { debug::start("app_start"); self::init(); self::setBaseUrl(); self::loadCoreConfigLanguage(); self::formatRequest(); self::getAppGroupPath(); self::loadAppGroupConfig(); self::getAppPath(); self::setPathConst(); self::loadAppConfig(); self::setTempConst(); self::createApp(); self::setTplConst(); self::loadPaths(); self::language(); self::ajaxCloseDebug(); self::setCharset(); self::session_set(); self::compileAppGroupFile(); self::compileAppFile(); self::compileCoreFile(); self::apprun(); Debug::show("app_start", "app_end"); Log::save(); } static private function init() { @ini_set('memory_limit', '128M'); @ini_set("register_globals", "off"); @ini_set('magic_quotes_runtime', 0); define("MAGIC_QUOTES_GPC", @get_magic_quotes_gpc() ? true : false ); define('REQUEST_METHOD', $_SERVER['REQUEST_METHOD']); define('IS_GET', REQUEST_METHOD == 'GET' ? true : false); define('IS_POST', REQUEST_METHOD == 'POST' ? true : false); define('IS_PUT', REQUEST_METHOD == 'PUT' ? true : false); define('IS_DELETE', REQUEST_METHOD == 'DELETE' ? true : false); if (function_exists("spl_autoload_register")) { spl_autoload_register(array(__CLASS__, "autoload")); } set_error_handler(array("ExceptionHD", "error"), E_ALL); set_exception_handler(array("ExceptionHD", "exception")); } static private function setBaseUrl() { $_SERVER['REQUEST_URI'] = rtrim($_SERVER['REQUEST_URI'], '/'); $_SERVER['DOCUMENT_ROOT'] = str_replace("\\", "/", $_SERVER['DOCUMENT_ROOT']); $_SERVER['SCRIPT_FILENAME'] = str_replace("\\", "/", $_SERVER['SCRIPT_FILENAME']); if (!strstr($_SERVER['REQUEST_URI'], $_SERVER['SCRIPT_NAME'])) { $_SERVER['REQUEST_URI'] = str_replace($_SERVER['SCRIPT_NAME'], '', $_SERVER['PHP_SELF']); } if (isset($_SERVER['PATH_INFO'])) { $_SERVER['PATH_INFO'] = trim($_SERVER['PATH_INFO'], '/'); } $host = $_SERVER['HTTP_HOST'] ? $_SERVER['HTTP_HOST'] : $_SERVER['SERVER_NAME']; $url = isset($_SERVER['REDIRECT_URL']) ? str_replace($_SERVER['REQUEST_URI'], '', $_SERVER['REDIRECT_URL']) : $_SERVER['SCRIPT_NAME']; define("__HOST__", "http://" . trim($host, '/')); $documentRoot = trim(str_ireplace($_SERVER['DOCUMENT_ROOT'], '', dirname($_SERVER['SCRIPT_FILENAME'])), '/'); $root = empty($documentRoot) ? "" : '/' . $documentRoot; define("__ROOT__", __HOST__ . $root); define("__HDPHP__", __HOST__ . '/' . trim(str_ireplace($_SERVER['DOCUMENT_ROOT'], "", PATH_HD), '/')); define("__STATIC__", __ROOT__ . '/static'); define("__HDPHP_DATA__", __HDPHP__ . '/data'); define("__HDPHP_TPL__", __HDPHP__ . '/libs/tpl'); define("__HDPHP_PLUGIN__", __HDPHP__ . '/plugin'); define("__WEB__", __HOST__ . $url); } static private function loadCoreConfigLanguage() { C(include PATH_HD_CONFIG . '/config.php'); C("VAR_APP", "a"); L(include PATH_HD_LANGUAGE . '/utf8.php'); } static private function formatRequest() { if (!MAGIC_QUOTES_GPC) { return; } $_GET = stripslashes_d($_GET); $_POST = stripslashes_d($_POST); $_REQUEST = stripslashes_d($_REQUEST); $_COOKIE = stripslashes_d($_COOKIE); } static private function getAppGroupPath() { if (defined("APP_GROUP_PATH")) { self::$pathAppGroup = rtrim(str_replace("\\", "/", APP_GROUP_PATH), '/'); } elseif (defined("APP_GROUP")) { self::$pathAppGroup = PATH_ROOT . '/' . APP_GROUP; } else { self::$pathAppGroup = PATH_ROOT; } } static private function loadAppGroupConfig() { if (defined("APP_GROUP")) { $common_config = self::$pathAppGroup . '/common/config/config.php'; is_file($common_config) && C(include($common_config)); Url::parseUrl(); } } static private function getAppPath() { if (defined("APP_NAME") && !defined("APP")) { define("APP", APP_NAME); } $pathApp = ''; $var_app = C("VAR_APP"); if (defined("APP_PATH")) { $pathApp = rtrim(str_replace("\\", "/", APP_PATH), '/'); } elseif (defined("APP")) { $pathApp = self::$pathAppGroup . '/' . APP; } elseif (!isset($_GET[$var_app]) && empty($_SERVER['PATH_INFO'])) { $pathApp = self::$pathAppGroup . '/index'; } elseif (isset($_GET[$var_app])) { $pathApp = self::$pathAppGroup . '/' . $_GET[$var_app]; } else { $pathinfo = rtrim($_SERVER['PATH_INFO'], '/'); $path = explode(C("pathinfo_dli"), $pathinfo); foreach ($path as $k => $v) { if ($k == 0 && $v == $var_app) { if (!isset($path[$k + 1])) { header("Content-type:text/html;charset=utf-8"); error("URL中" . $var_app . "后连接应用名如:" . $var_app . '/admin 形式', false); } $pathApp = self::$pathAppGroup . '/' . $path[$k + 1]; } } $pathApp = $pathApp ? $pathApp : self::$pathAppGroup . '/' . $path[0]; } self::$pathApp = str_replace('\\', "/", $pathApp); } static private function loadAppConfig() { $app_config = self::$pathApp . '/config/config.php'; is_file($app_config) && C(include($app_config)); defined("__APP__") || Url::parseUrl(); } static private function setPathConst() { define("PATH_APP_GROUP", self::$pathAppGroup); if (defined("APP_GROUP_PATH") && !defined("APP_GROUP")) { define("APP_GROUP", dirname(PATH_APP_GROUP)); } define("PATH_COMMON_CONFIG", PATH_APP_GROUP . '/common/config'); define("PATH_COMMON_LANGUAGE", PATH_APP_GROUP . '/common/language'); define("PATH_COMMON_LIBS", PATH_APP_GROUP . '/common/libs'); define("PATH_COMMON_MODEL", PATH_APP_GROUP . '/common/model'); if (!is_dir(self::$pathApp)) { if (!is_file(PATH_TEMP_BOOT)) { dir_create(self::$pathApp); } else { header("Content-type:text/html;charset=utf-8"); _404(APP."应用目录没有创建，可以通过删除temp目录，让系统自动创建。"); } } define("PATH_APP", str_replace('\\', '/', realpath(self::$pathApp))); define("PATH_CONFIG", PATH_APP . '/config'); define("PATH_LANGUAGE", PATH_APP . '/language'); define("PATH_LIBS", PATH_APP . '/libs'); define("PATH_CONTROL", PATH_APP . '/control'); define("PATH_MODEL", PATH_APP . '/model'); } static private function setTempConst(){ define("PATH_TEMP_APP_GROUP", defined("APP_GROUP") ? PATH_TEMP . '/Applications/' . APP_GROUP . '_G/' : PATH_TEMP . '/Applications/'); define("PATH_TEMP_APP", PATH_TEMP_APP_GROUP . APP . '_A'); define("PATH_TEMP_CACHE", PATH_TEMP_APP . '/cache'); define("PATH_TEMP_CONTROL", PATH_TEMP_APP . '/' . CONTROL . '_C'); define("PATH_TEMP_METHOD", PATH_TEMP_CONTROL . '/' . METHOD); define("PATH_TEMP_TABLE", PATH_TEMP . '/table'); define("PATH_TEMP_SELECT", PATH_TEMP_METHOD . '/select'); define("PATH_TEMP_COMPILE", PATH_TEMP_METHOD . '/compile'); define("PATH_TEMP_TPL_CACHE", PATH_TEMP_METHOD . '/cache'); } static private function createApp() { if (!is_dir(PATH_CONFIG)) { load_file(PATH_HD_CORE . '/createApp.php'); } } static private function loadPaths() { auto_load_system_file(include PATH_HD_CORE . '/paths.php'); } static private function setTplConst() { $tplDir = rtrim(C("TPL_DIR"), '/'); if (empty($tplDir)) { $tplDir = 'tpl'; C("TPL_DIR", $tplDir); } $template_dir = ''; $style = C('TPL_STYLE') ? '/' . C('TPL_STYLE') : ''; if (strstr($tplDir, '/')) { $template_dir = $tplDir . $style; } else { $template_dir = PATH_APP . '/' . $tplDir . $style; } define("PATH_TPL", $template_dir); define("__TPL__", __HOST__ . '/' . trim(str_ireplace($_SERVER['DOCUMENT_ROOT'], '', PATH_TPL), '/')); define("__PUBLIC__", __TPL__ . '/public'); define("PATH_PUBLIC", PATH_TPL . '/public'); } static private function language() { $language = C("LANGUAGE"); $appGroupLang = PATH_COMMON_LANGUAGE . '/' . $language . '.php'; $appLang = PATH_LANGUAGE . '/' . $language . '.php'; if (defined("APP_GROUP") && is_file($appGroupLang)) { L(load_file($appGroupLang)); } if (is_file($appLang)) { L(load_file($appLang)); } } static private function ajaxCloseDebug() { if (!C("debug_ajax") && C("DEBUG") && ajax_request()) { C("debug", 0); } } static public function setCharset() { $charset = strtoupper(C("CHARSET")) == 'UTF8' ? "UTF-8" : strtoupper(C("CHARSET")); define("CHARSET", $charset); define("CHARSET_DB", str_replace("-", "", $charset)); } static public function session_set() { $sessionDriver = SessionFactory::factory(); $sessionDriver->init(); if (!ini_get("session.auto_start") && C("SESSION_AUTO")) { session_start(); } } static private function compileAppGroupFile() { if (!defined('APP_GROUP')) { return; } $compileAppFile = PATH_TEMP_APP_GROUP . 'APP_GROUP_' . APP_GROUP . '.php'; if (file_exists($compileAppFile) && !C("DEBUG")) { load_File($compileAppFile); return; } if (C("DEBUG")) { $files = glob(PATH_COMMON_LIBS . '/*'); if (!$files) return; foreach ($files as $v) { load_file($v); } } else { $files = glob(PATH_COMMON_LIBS . '/*'); if (!$files) return; php_merge($files, $compileAppFile); load_File($compileAppFile); } } static private function compileAppFile() { $compileAppFile = PATH_TEMP_APP . '/APP_' . APP . '.php'; if (file_exists($compileAppFile) && !C("DEBUG")) { load_File($compileAppFile); return; } if (C("DEBUG")) { $appFile = glob(PATH_LIBS . '/*'); if (!$appFile) return; foreach ($appFile as $v) { load_file($v); } } else { $appFile = glob(PATH_LIBS . '/*'); if (!$appFile) return; php_merge($appFile, $compileAppFile); } } static public function compileCoreFile() { if (!COMPILE) { is_file(PATH_TEMP_BOOT) && unlink(PATH_TEMP_BOOT); return; } elseif (!is_file(PATH_TEMP_BOOT)) { $coreFile = PATH_HD_CORE . '/compileFiles.php'; $files = require $coreFile; php_merge($files, PATH_TEMP_BOOT); } } static public function apprun() { if (function_exists("date_default_timezone_set")) { date_default_timezone_set(C("default_time_zone")); } $controlFile = rtrim(PATH_APP, '/') . '/control/' . CONTROL . C("CONTROL_FIX") . '.php'; $control = control($controlFile); if ($control) { call_user_func(array(&$control, METHOD)); } else { $emptyControlFile = rtrim(PATH_APP, '/') . '/control/Empty' . C("CONTROL_FIX") . '.php'; $emptyControl = control($emptyControlFile); if ($emptyControl) { call_user_func(array(&$emptyControl, METHOD)); } else { _404($controlFile . "控制器文件不存在或类名称定义错误(注意大小写)"); } } } static private function autoload($className) { $control_fix = C("CONTROL_FIX"); if (substr($className, -(strlen($control_fix))) == $control_fix && strlen($className) > 7) { $controlInfo = get_control_file($className); $classFile = $controlInfo[0]; } elseif (auto_load_system_file($className)) { $classFile = auto_load_system_file($className); } else { $classFile = PATH_HD . '/libs/class/' . $className . '.class.php'; } load_file($classFile); } } ?><?php
if (!defined("PATH_HD")) exit('No direct script access allowed'); final class debug { static $info = array(); static $runtime; static $memory; static $memory_peak; static $sqlCount; static $SqlExeArr; static public function start($start) { self::$runtime [$start] = microtime(true); if (function_exists("memory_get_usage")) { self::$memory [$start] = memory_get_usage(); } if (function_exists("memory_get_peak_usage")) { self::$memory_peak [$start] = false; } } static public function runtime($start, $end = '', $decimals = 4) { if (!isset(self::$runtime [$start])) { throw new exceptionHD(L("_nohavedebugstart") . $start); } if (empty(self::$runtime [$end])) { self::$runtime [$end] = microtime(true); return number_format(self::$runtime [$end] - self::$runtime [$start], $decimals); } } static public function memory_perk($start, $end = '') { if (!isset(self::$memory_peak [$start])) return mt_rand(200000, 1000000); if (!empty($end)) self::$memory_peak [$end] = memory_get_peak_usage(); return max(self::$memory_peak [$start], self::$memory_peak [$end]); } static public function show($start, $end) { if (!C("DEBUG")) return; $load_file_list = load_file(); $serverInfo = empty($_SERVER['SERVER_SOFTWARE']) ? $_SERVER['SERVER_SIGNATURE'] : $_SERVER['SERVER_SOFTWARE']; $system = "<div class='debug_server'>"; $system.="<strong>" . L("debug_show1") . "</strong>: " . $serverInfo . "<br/>"; $system.="<strong>" . L("debug_show2") . "</strong>: " . $_SERVER['HTTP_USER_AGENT'] . "<br/>"; $system.="<strong>" . L("debug_show3") . "</strong>: " . phpversion() . "<br/>"; $system.="<strong>" . L("debug_show4") . "</strong>: " . $_SERVER['HTTP_HOST'] . "<br/>"; $system.="<strong>" . L("debug_show5") . "</strong>: " . $_SERVER['REQUEST_METHOD'] . "<br/>"; $system.="<strong>" . L("debug_show6") . "</strong>: " . $_SERVER['SERVER_PROTOCOL'] . "<br/>"; if (defined("PATH_CONTROL")) { $system.="<strong>" . L("debug_show7") . "</strong>: " . PATH_CONTROL . '/' . CONTROL . C("CONTROL_FIX") . ".php<br/>"; } $sessionId = session_id()?session_id():'没有开启SESSION，修改配置项【SESSION_AUTO=1】系统运行时会自动开启SESSION'; $system.="<strong>" . L("debug_show8") . "</strong>: " . $sessionId . "<br/>"; $system.="</div>"; $e ['system'] = $system; $compileFiles = tpl_compile(); if (!empty($compileFiles)) { $tplCompileFiles = '<table width=100%>
            <thead><tr>
            <td style="font-size:13px;width:80px;padding:5px;">' . L("debug_show16") . '</td>
            <td style="font-size:13px;padding:5px;">' . L("debug_show18") . '</td>
            </tr></thead>'; foreach ($compileFiles as $k => $v) { $tplCompileFiles.= '<tr><td style="font-size:12px;width:80px;padding:6px;">' . $v[0] . ' </td>
                    <td style="font-size:12px;padding:6px;">' . str_replace(array("/", "\\"), DIRECTORY_SEPARATOR, $v[1]) . "</td></tr>"; } $tplCompileFiles.="</table>"; } if (self::$sqlCount > 0) { $e['sqlCount'] = self::$sqlCount; $e['sqlExeArr'] = self::$SqlExeArr; $sqlExeArr = '<table width=100%>
            <thead><tr>
            <td>' . L("debug_show10") . '</td>
            <td>' . L("debug_show11") . '</td>
            </tr></thead>'; foreach ($e['sqlExeArr'] as $k => $v) { $sqlExeArr.= "<tr><td width='35'>[" . $k . "] </td><td>" . htmlspecialchars($v) . "</td></tr>"; } $sqlExeArr.="</table>"; $sqlExeArr.="<p>" . L("debug_show12") . $e ['sqlCount'] . L("debug_show13") . "</p>"; } $loadfile = '<table width=100%>
            <thead><tr>
            <td width="30">ID</td>
            <td>File</td>
            <td width="45">Time</td>
            <td width="60">Memory</td>
            </tr></thead>'; $message = L("debug_show14") . ": " . number_format(microtime(true)-NOW_MICROTIME,4) . "&nbsp;&nbsp;" . L("debug_show15") . number_format(self::memory_perk($start, $end) / pow(1024, 1), 0) . 'kb'; $i = 1; foreach ($load_file_list as $k => $v) { $time = isset($v['time'])?$v['time']:''; $memory = isset($v['memory'])?$v['memory']:''; $loadfile .= "<tr><td>[" . $i++ . "] </td><td>" . $v['path'] . "</td><td>" . $time . "</td><td>" . $memory . "</td></tr>"; } $loadfile.="</table>"; $e ['loadfile'] = $loadfile . "<p>$message</p>"; include(PATH_HD_TPL.'/debug.html'); } } ?><?php
 if (!defined("PATH_HD")) exit('No direct script access allowed'); final class exceptionHD extends Exception { function __construct($message, $code = 1) { parent::__construct($message, $code); } static public function exception(exceptionHD $e) { $e->show(); } private function getException() { $trace = $this->getTrace(); $err = array_shift($trace); $exception ['message'] = "<b>[" . L("exceptionhd_getexception1") . "] </b>" . $this->message . "<br/>"; $exception['message'].="\t<b>[" . L("exceptionhd_getexception2") . "] </b>" . $err['file'] . "<br/>"; $exception['message'].="\t<b>[" . L("exceptionhd_getexception3") . "] </b>" . $err['line'] . "<br/>"; $info = ''; foreach ($trace as $k => $v) { if (empty($v['file'])) continue; $info[$k]['file'] = $v ['file']; $info[$k]['class'] = empty($v['class']) ? '' : $v['class']; $info[$k]['function'] = empty($v['function']) ? '' : $v['function']; $info[$k]['line'] = isset($v['line']) ? $v['line'] : ''; } $exception['info'] = $info; return $exception; } private function show() { $exception = $this->getException(); log::write(strip_tags($exception['message'])); $exceptionTpl = PATH_HD_TPL . '/exception.html'; if (!C("DEBUG")) { $e['message'] = C("ERROR_MESSAGE") . "\t\t <span style='color:#666; font-weight:normal;'>" . L("exceptionhd_show") . "</span>"; include $exceptionTpl; exit; } $e['message'] = $exception['message']; $loadfile = '<table width=100%>
            <thead><tr>
            <td>Index</td>
            <td>File</td>
            <td>Class</td>
            <td>Function</td>
            <td>Line</td>
            </tr></thead>'; $info = array_reverse($exception['info']); foreach ($info as $k => $v) { $loadfile.="<tr><td>" . $k . "</td><td>" . $v['file'] . "</td><td>" . $v['class'] . "</td><td>" . $v['function'] . "</td><td>" . $v['line'] . "</td></tr>"; } $e['loadfile'] = $loadfile . "</table>"; include $exceptionTpl; } static public function error($errno, $errstr, $errfile, $errline) { switch ($errno) { case E_ERROR : case E_USER_ERROR : $errormsg = "[" . L("exceptionhd_error1") . "]{$errstr}\t[" . L("exceptionhd_error2") . "]$errfile\t[" . L("exceptionhd_error3") . "]$errline"; log::write($errormsg); error($errormsg,false); break; case E_USER_WARNING : case E_USER_NOTICE : default : $errormsg = "[" . L("exceptionhd_error4") . "] {$errstr}\t[" . L("exceptionhd_error5") . "]{$errfile}\t[" . L("exceptionhd_error6") . "]$errline"; self::notice(func_get_args()); log::set($errormsg); } } static private function notice($e) { if (!C("DEBUG") || !C("SHOW_NOTICE")) { return; } $time = number_format(microtime(true) - debug::$runtime ['app_start'], 5); $memory = function_exists("memory_get_usage") ? get_size(memory_get_usage()) : ''; $message = $e [1]; $file = str_replace(array("/", "\\"), DIRECTORY_SEPARATOR, $e[2]); $line = $e [3]; $message = "
<div style='width:800px;margin:0px 0px 20px 20px;border:solid 1px #dcdcdc; background:#fff;'>
<h1 style='color:#000;font-size:14px; border-bottom:solid 1px #dcdcdc;
line-height:1.5em;padding:5px 20px;'><span style='display:block;'>" . L("exceptionhd_notice") . ": $message</span></h1>
	<table style='border:solid 1px #dcdcdc;width:780px;color:#4F5155; font-size:13px;background-color:#F9F9F9;margin:10px; '>
                    <tr><td style='padding:6px 10px;'>Filename: " . $file . "</td><tr>
                    <tr><td style='padding:6px 10px;'>Line: $line</td><tr>
                    <tr><td style='padding:6px 10px;'>time: $time</td><tr>
                    <tr><td style='padding:6px 10px;'>Memory: $memory</td><tr>
	</table>
</div>"; echo $message; } } ?><?php
if (!defined("PATH_HD")) exit('No direct script access allowed'); class Log { static $log = array(); static public function set($message, $logType = 'notice') { if (!C("LOG_SAVE")) return; if (in_array($logType, C("LOG_TYPE"))) { $date = date("y-m-d h:i:s"); self::$log [] = $message . "\t[时间]" . $date . "\r\n"; } } static public function save($type = 3, $destination = NULL, $extraHeaders = NULL) { if (C("DEBUG") || !C("LOG_SAVE") || empty(self::$log)) return; if (is_null($destination)) { $destination = PATH_LOG . '/' . date("ymd") . md5(C("LOG_KEY")) . ".log"; } if ($type == 3) { if (is_file($destination) && filesize($destination) > C("LOG_SIZE")) { rename($destination, dirname($destination) . "/" . time() . ".log"); } } error_log(implode("", self::$log), $type, $destination); } static public function write($message, $type = 3, $destination = NULL, $extraHeaders = NULL) { if (C("DEBUG") || !C("LOG_SAVE")) return; Dir::create(PATH_LOG); if (is_null($destination)) { $destination = PATH_LOG . '/' . date("ymd") . md5(C("LOG_KEY")) . ".log"; } if ($type == 3) { if (is_file($destination) && filesize($destination) > C("LOG_SIZE")) { rename($destination, dirname($destination) . "/" . time() . ".log"); } } $now = date("y-m-d h:i:s"); $message = $message . "\t[时间]" . $now . "\r\n"; error_log($message, $type, $destination, $extraHeaders = null); } } ?><?php
 if (!defined("PATH_HD")) exit('No direct script access allowed'); final class Url { static private $isSetApp; static private $queryString; static private $isPathinfo; static public function parseUrl() { self::getQueryString(); self::$isSetApp = defined("APP") ? true : false; $get = array(); if (self::$isPathinfo) { $info = explode('/', self::$queryString); if (!defined("APP")) { if ($info [0] != C("VAR_APP")) { $get [C('VAR_APP')] = $info [0]; array_shift($info); } else { $get [C('VAR_APP')] = $info [1]; array_shift($info); array_shift($info); } } if (isset($info[0]) && $info[0] != C('VAR_CONTROL')) { $get [C('VAR_CONTROL')] = isset($info [0]) ? $info[0] : C("DEFAULT_CONTROL"); array_shift($info); } else { $get [C('VAR_CONTROL')] = isset($info [1]) ? $info[1] : C("DEFAULT_CONTROL"); array_shift($info); array_shift($info); } if (isset($info[0]) && $info[0] != C("VAR_METHOD")) { $get [C('VAR_METHOD')] = isset($info [0]) ? $info[0] : C("DEFAULT_METHOD"); array_shift($info); } else { $get [C('VAR_METHOD')] = isset($info [1]) ? $info[1] : C("DEFAULT_METHOD"); array_shift($info); array_shift($info); } $count = count($info); for ($i = 0; $i < $count;) { $get [$info [$i]] = isset($info [$i + 1]) ? $info [$i + 1] : ''; $i+=2; } } $_GET = array_merge($_GET, $get); $gets = array(); foreach ($_GET as $k => $v) { if ($v == '') { continue; } $gets[$k] = $v; } $_GET = $gets; self::setUrlConst(); $_control = C('VAR_CONTROL'); $_method = C('VAR_METHOD'); unset($_GET[$_control]); unset($_GET[$_method]); if (defined("APP_GROUP")) { $_app = C('VAR_APP'); unset($_GET[$_app]); } if (C('URL_TYPE') == 2) { $_pathinfo_var = C('PATHINFO_VAR'); unset($_GET[$_pathinfo_var]); } } static private function setUrlConst() { if (!defined("APP")) { $app = isset($_GET [C('VAR_APP')]) && !empty($_GET[C('VAR_APP')]) ? $_GET [C('VAR_APP')] : C("DEFAULT_APP"); define("APP", $app); } define("CONTROL", (isset($_GET [C('VAR_CONTROL')]) && !empty($_GET[C('VAR_CONTROL')]) ? $_GET [C('VAR_CONTROL')] : C("DEFAULT_CONTROL"))); define("METHOD", (isset($_GET [C('VAR_METHOD')]) && !empty($_GET[C('VAR_METHOD')]) ? $_GET [C('VAR_METHOD')] : C("DEFAULT_METHOD"))); if (defined("APP_GROUP")) { define("__APP_GROUP__", __ROOT__ . '/' . APP_GROUP); } $url_type = C("URL_TYPE"); switch ($url_type) { case 1: define("__APP__", __WEB__ . (self::$isSetApp ? '' : '/' . APP)); define("__CONTROL__", __APP__ . '/' . CONTROL); define("__METH__", __CONTROL__ . '/' . METHOD); break; case 2: define("__APP__", __WEB__ . (self::$isSetApp ? '' : '?' . C("VAR_APP") . '=' . APP)); define("__CONTROL__", __APP__ . (self::$isSetApp ? '?' : '&') . C('VAR_CONTROL') . '=' . CONTROL); define("__METH__", __CONTROL__ . '&' . C('VAR_METHOD') . '=' . METHOD); break; default: $pathinfo_var = C("PATHINFO_VAR"); define("__APP__", __WEB__ . '?' . $pathinfo_var . '=' . (self::$isSetApp ? '' : '/' . APP)); define("__CONTROL__", __APP__ . '/' . CONTROL); define("__METH__", __CONTROL__ . '/' . METHOD); } define('__URL__', self::getFormatUrl()); } static private function getFormatUrl() { $pathinfo_dli = C("PATHINFO_Dli"); $url_type = C("URL_TYPE"); $url = ''; switch ($url_type) { case 1: foreach ($_GET as $k => $v) { if (in_array($k, array(C("VAR_APP"), C("VAR_CONTROL"), C("VAR_METHOD")))) continue; $url.=$pathinfo_dli . $k . $pathinfo_dli . $v; } $url = trim($url, $pathinfo_dli); $url = __METH__ . $pathinfo_dli . $url; break; case 2: foreach ($_GET as $k => $v) { $url.=$k . '=' . $v . '&'; } $url = trim($url, '&'); $url = __WEB__ . '?' . $url; break; } return rtrim($url, $pathinfo_dli); } static private function getQueryString() { $pathinfo_var = C("PATHINFO_VAR"); if (!isset($_GET[$pathinfo_var]) && (!isset($_SERVER['PATH_INFO']) || empty($_SERVER['PATH_INFO']))) { $query_string = $_SERVER['QUERY_STRING']; $routeUrl = self::parseRoute($query_string); if ($query_string == $routeUrl) { self::$isPathinfo = FALSE; } else { $_GET = array(); $getS = array(); parse_str($routeUrl, $getS); $_GET = $getS; } return; } self::$isPathinfo = true; self::$queryString = isset($_GET[$pathinfo_var]) ? $_GET[$pathinfo_var] : str_replace($_SERVER['SCRIPT_NAME'], '', $_SERVER['REQUEST_URI']); self::$queryString = trim(self::$queryString, '/'); $pathinfo_dli = C("PATHINFO_Dli"); self::delPathinfoHtml(); if (C("route")) { self::$queryString = self::parseRoute(self::$queryString); } $url = explode("?", self::$queryString); if (count($url) >= 2) { $arr = explode($pathinfo_dli, $url[0]); if (defined("APP")) { self::$queryString = count($arr) == 1 ? $url[0] . $pathinfo_dli . C("DEFAULT_METHOD") : self::$queryString; } else { self::$queryString = count($arr) == 2 ? $url[0] . $pathinfo_dli . C("DEFAULT_METHOD") . $pathinfo_dli . $arr[1] : self::$queryString; } } self::$queryString = trim(preg_replace("/\?|=|&/i", '/', self::$queryString), '/'); self::$queryString = str_replace($pathinfo_dli, '/', self::$queryString); } static private function delPathinfoHtml() { $pathinfo_html = "." . trim(C("PATHINFO_HTML"), "."); self::$queryString = str_ireplace($pathinfo_html, "", self::$queryString); self::$queryString = rtrim(self::$queryString, '?'); } static private function parseRoute($query_string) { $route = C("route"); if (!$route) return $query_string; $search = array( "/(:year)/i", "/(:month)/i", "/(:day)/i", "/(:num)/i", "/(:any)/i", "/(:\w+)/i", "/\//", ); $replace = array( "\d{2,4}", "\d{1,2}", "\d{1,2}", "\d+", ".+", "(\w+)", "\/", ); foreach ($route as $k => $v) { $v = rtrim($v, '/'); if (preg_match("/^\/.*\/[isUx]*$/i", $k)) { if (preg_match($k, $query_string)) { $v = str_replace("#", '\\', $v); $query_string = preg_replace($k, $v, $query_string); break; } continue; } $preg_k = "/^\/?" . preg_replace($search, $replace, $k) . "$/i"; if (!preg_match($preg_k, $query_string)) { continue; } preg_match("/[^:\sa-z0-9]/i", $k, $routeVar); if (!$routeVar) { $query_string = $v; break; } $role = explode($routeVar[0], $k); $urls = explode($routeVar[0], $query_string); $query_string = $v; $getName = ''; foreach ($role as $m => $n) { if (!strstr($n, ":")) { continue; } $getName = str_replace(":", "", $n); $_GET[$getName] = $urls[$m]; } break; } return $query_string; } function toRoute($url) { $route = C("route"); if (!$route) { return $url; } foreach ($route as $routeKey => $routeVal) { $routeKey = trim($routeKey); if (substr($routeKey, 0, 1) === '/') { $regGroup = array(); preg_match_all("/\(.*?\)/", $routeKey, $regGroup, PREG_PATTERN_ORDER); $searchRegExp = $routeVal; for ($i = 0, $total = count($regGroup[0]); $i < $total; $i++) { $searchRegExp = str_replace('#' . ($i + 1), $regGroup[0][$i], $searchRegExp); } $urlArgs = array(); preg_match_all("@" . $searchRegExp . "@", $url, $urlArgs, PREG_SET_ORDER); if ($urlArgs) { $routeUrl = trim(str_replace(array('/^', '$/'), '', $routeKey), '/'); foreach ($regGroup[0] as $k => $v) { $routeUrl = str_replace($v, $urlArgs[0][$k + 1], $routeUrl); } return trim($routeUrl, '/'); } } else { preg_match_all('/:([a-z]*)/', $routeKey, $routeGetVars, PREG_PATTERN_ORDER); $getRouteUrl = $routeVal; switch (C("URL_TYPE")) { case 1: $getRouteUrl.= '/'; foreach ($routeGetVars[1] as $getK => $getV) { $getRouteUrl.= $getV . '/(.*)' . '/'; } $getRouteUrl = '@' . trim($getRouteUrl, '/') . '@'; break; case 2: $getRouteUrl.= '&'; foreach ($routeGetVars[1] as $getK => $getV) { $getRouteUrl.= $getV . '=(.*)' . '&'; } $getRouteUrl = '@' . trim($getRouteUrl, '&') . '@'; break; } $getArgs = array(); preg_match_all($getRouteUrl, $url, $getArgs, PREG_SET_ORDER); if ($getArgs) { $newUrl = $routeKey; foreach ($routeGetVars[0] as $rk => $getName) { $newUrl = str_replace($getName, $getArgs[0][$rk + 1], $newUrl); } return $newUrl; } } } return $url; } static public function urlRemoveParam($var, $url = null) { $pathinfo_dli = C("PATHINFO_Dli"); if (!is_null($url)) { $url = strstr($url, "&") ? $url . '&' : $url . $pathinfo_dli; $url = str_replace($pathinfo_dli, "###", $url); $search = array( "/$var" . "###" . ".*?" . "###" . "/", "/$var=.*?&/i", "/\?&/", "/&&/" ); $replace = array( "", "", "?", "" ); $url = preg_replace($search, $replace, $url); $url = rtrim($url, "&"); $url = rtrim($url, "###"); $url = str_replace("###", $pathinfo_dli, $url); return $url; } $get = $_GET; unset($get[C("VAR_APP")]); unset($get[C("VAR_CONTROL")]); unset($get[C("VAR_METHOD")]); $url = ''; $url_type = C("URL_TYPE"); foreach ($get as $k => $v) { if ($k == $var) continue; if ($url_type == 1) { $url.=$pathinfo_dli . $k . $pathinfo_dli . $v; } else { $url.="&" . $k . "=" . $v; } } $url = trim($url, $pathinfo_dli); $url = trim($url, "&"); $url = empty($url) ? "" : $pathinfo_dli . $url; if ($url_type == 1) { return __METH__ . $url; } else { return __METH__ . "&" . trim($url, "&"); } } } ?><?php
 if (!defined("PATH_HD")) exit('No direct script access allowed'); function M($tableName = null, $full = null) { return new Model($tableName, $full); } function K($model) { $modelArr = get_model_file($model); $fileExists = load_file($modelArr[0]); if (!$fileExists) { error(L("functions_k_is_file") . $modelArr[0], false); } $modelClass = $modelArr[1] . 'Model'; if (!class_exists($modelClass, false)) { error(L("functions_k_error"), false); } $model = new $modelClass($modelArr[1]); return $model; } function R($tableName = null, $full = null) { return new relationModel($tableName, $full); } function V($tableName = null, $full = null) { return new ViewModel($tableName, $full); } function U($pathinfo, $args = array()) { if (preg_match("/^https?:\/\//", $pathinfo)) return $pathinfo; $end = strpos($pathinfo, '.php'); if ($end) { $web = __ROOT__ . '/' . substr($pathinfo, 0, $end + 4); $pathinfo = substr($pathinfo, $end + 4); } else { $web = __WEB__; } if (is_string($args)) { parse_str($args, $args); } $parseUrl = parse_url(trim($pathinfo, '/')); $path = trim($parseUrl['path'], '/'); if (isset($parseUrl['query'])) { parse_str($parseUrl['query'], $query); $args = array_merge($query, $args); } $gets = array(); if (is_array($args)) { foreach ($args as $n => $q) { array_push($gets, $n); array_push($gets, $q); } } $vars = explode("/", $path); $urlType = C("URL_TYPE"); switch ($urlType) { case 1: $root = $web . '/'; break; case 2: $root = $web . '?'; break; } $data = array(); switch (count($vars)) { case 2: $data[] = C("VAR_CONTROL"); $data[] = array_shift($vars); $data[] = C("VAR_METHOD"); $data[] = array_shift($vars); break; case 1: $data[] = C("VAR_CONTROL"); $data[] = CONTROL; $data[] = C("VAR_METHOD"); $data[] = array_shift($vars); break; default: $data[] = C("VAR_APP"); $data[] = array_shift($vars); $data[] = C("VAR_CONTROL"); $data[] = array_shift($vars); $data[] = C("VAR_METHOD"); $data[] = array_shift($vars); if (is_array($vars)) { foreach ($vars as $v) { $data[] = $v; } } } $varsAll = array_merge($data, $gets); $url = ''; switch ($urlType) { case 1: foreach ($varsAll as $value) { $url.=C('PATHINFO_Dli') . $value; } $url = str_replace(array("/" . C("VAR_APP") . "/", "/" . C("VAR_CONTROL") . "/", "/" . C("VAR_METHOD") . "/"), "/", $url); $url = substr($url, 1); break; case 2: foreach ($varsAll as $k => $value) { if ($k % 2) { $url.='=' . $value; } else { $url.='&' . $value; } } $url = substr($url, 1); break; } $pathinfo_html = $urlType === 1 ? '.' . trim(C("PATHINFO_HTML"), '.') : ''; return $root . url::toRoute($url) . $pathinfo_html; } function F($name, $value = false, $path = PATH_TEMP_CACHE) { $_cache = array(); $name = md5($name); $cacheFile = $path . '/' . $name . '.php'; if (is_null($value)) { if (is_file($cacheFile)) { unlink($cacheFile); unset($_cache[$name]); } } if ($value == false) { if (isset($_cache[$name])) return $_cache[$name]; return is_file($cacheFile) ? include $cacheFile : null; } $data = "<?php if(!defined('PATH_HD'))exit;\nreturn " . strip_space(var_export($value, true)) . ";\n?>"; is_dir($path) || dir_create($path); if (!file_put_contents($cacheFile, $data)) { return false; } $_cache[$name] = $data; return true; } function S($name, $value = false, $expire = null, $options = array()) { static $_data = array(); $cacheObj = cache::init($options); if (is_null($value)) { return $cacheObj->del($name); } $driver = isset($options['driver']) ? $options['driver'] : ''; $key = $name . $driver; if ($value === false) { if (isset($_data[$key])) { return $_data[$key]; } else { return $cacheObj->get($name); } } $cacheObj->set($name, $value, $expire); $_data[$key] = $value; return true; } function get_model_file($path) { $path = rtrim($path, '/'); $path = str_ireplace("Model.php", '', $path); $path = str_replace(C("MODEL_FIX"), '', $path); $pathArr = explode('/', $path); $arr = array(); switch (count($pathArr)) { case 1: $arr['app_group'] = ''; $arr['app'] = PATH_APP . '/'; $arr['model'] = $pathArr[0]; break; case 2: $arr['app_group'] = PATH_APP_GROUP . '/'; $arr['app'] = $pathArr[0] . '/'; $arr['model'] = $pathArr[1]; break; default: return array($path . C("MODEL_FIX") . '.php', array_pop($pathArr)); } $modelFile = $arr['app_group'] . $arr['app'] . 'model/' . ucfirst($arr['model']) . C("MODEL_FIX") . '.php'; return array($modelFile, array_pop($pathArr)); } function get_control_file($path) { $path = rtrim($path, '/'); $path = str_replace(C("CONTROL_FIX") . ".php", '', $path); $path = str_replace(C("CONTROL_FIX"), '', $path); $pathArr = explode('/', $path); $arr = array(); switch (count($pathArr)) { case 1: $arr['app_group'] = ''; $arr['app'] = PATH_APP . '/'; $arr['control'] = $pathArr[0]; break; case 2: $arr['app_group'] = PATH_APP_GROUP . '/'; $arr['app'] = $pathArr[0] . '/'; $arr['control'] = $pathArr[1]; break; default: return array($path . C("CONTROL_FIX") . '.php', array_pop($pathArr)); } $controlFile = $arr['app_group'] . $arr['app'] . 'control/' . $arr['control'] . C("CONTROL_FIX") . '.php'; return array($controlFile, array_pop($pathArr)); } function control($control) { $controlArr = get_control_file($control); static $_control = array(); $name = md5($controlArr[0]); if (isset($_control [$name])) { return $_control [$name]; } $controlFile = $controlArr[0]; $controlClass = $controlArr[1] . C("CONTROL_FIX"); if (load_file($controlFile) && class_exists($controlClass, false)) { $_control [$name] = new $controlClass(); return $_control [$name]; } return false; } function session($name, $value = '') { static $_start = false; if ($_start === false) { $_start = true; session_id() || session_start(); } if (is_null($name)) { $_SESSION = array(); session_unset(); session_destroy(); } elseif (is_null($value)) { unset($_SESSION[$name]); } elseif (empty($value)) { switch (strtolower($name)) { case "[parse]": session_write_close(); break; } return isset($_SESSION[$name]) ? $_SESSION[$name] : null; } else { $_SESSION[$name] = $value; } } function md5_d($var) { return md5(serialize($var)); } function dir_create($dirName, $auth = 0755) { $dirName = str_replace("\\", "/", $dirName); $dirPath = rtrim($dirName, '/'); if (is_dir($dirPath)) return true; $dirs = explode('/', $dirPath); $dir = ''; foreach ($dirs as $v) { $dir .= $v . '/'; if (!is_dir($dir)) { @mkdir($dir, $auth, true) || throw_exception($dir . "目录创建失败"); } } return is_dir($dirPath); } function O($class, $method = '', $args = array()) { static $result = array(); $name = empty($args) ? $class . $method : $class . $method . md5_d($args); if (!isset($result [$name])) { $class = new $class (); if (!empty($method) && method_exists($class, $method)) { if (!empty($args)) { $result [$name] = call_user_func_array(array(&$class, $method), $args); } else { $result [$name] = $class->$method(); } } else { $result [$name] = $class; } } return $result [$name]; } function load_file($file = "") { static $fileArr = array(); if (empty($file)) { return $fileArr; } $name = md5($file); if (isset($fileArr[$name])) { return true; } if (!file_exists_case($file)) { return false; } require $file; $fileArr[$name] = array(); $fileArr[$name]['path'] = $file; if (C("DEBUG")) { $fileArr[$name]['time'] = 'abc'; if (function_exists("memory_get_usage")) { $fileArr [$name]['memory'] = number_format(memory_get_usage() / pow(1024, 1), 0) . "kb"; } else { $fileArr [$name]['memory'] = "0kb"; } } return true; } function file_exists_case($file) { if (is_file($file)) { if (IS_WIN && C("CHECK_FILE_CASE")) { if (basename(realpath($file)) != basename($file)) { return false; } } return true; } return false; } function url_remove_param($var, $url = null) { return url::urlRemoveParam($var, $url); } function get_size($size, $decimals = 2) { switch (true) { case $size >= pow(1024, 3): return round($size / pow(1024, 3), $decimals) . " GB"; case $size >= pow(1024, 2): return round($size / pow(1024, 2), $decimals) . " MB"; case $size >= pow(1024, 1): return round($size / pow(1024, 1), $decimals) . " KB"; default: return $size . 'B'; } } function array_defined($arr) { foreach ($arr as $k => $v) { $k = strtoupper($k); if (is_string($v)) { define($k, $v); } elseif (is_numeric($v)) { defined($k, $v); } elseif (is_bool($v)) { $v = $v ? 'true' : 'false'; define($k, $v); } } return true; } function C($name = null, $value = null) { static $config = array(); if (is_null($name)) { return $config; } if (is_string($name)) { $name = strtolower($name); if (!strstr($name, '.')) { if (is_null($value)) { if (isset($config[$name]) && !is_array($config[$name])) { $config[$name] = trim($config[$name]); } return isset($config [$name]) && !empty($config[$name]) ? $config [$name] : null; } if ($name == 'language') { $common_language = PATH_COMMON_LANGUAGE . '/' . $value . '.php'; $app_language = PATH_LANGUAGE . '/' . $value . '.php'; if (is_file(is_file($app_language))) { L(include $app_language); } elseif (is_file($common_language)) { L(include $common_language); } } $config [$name] = $value; return $config[$name]; } $name = array_change_key_case_d(explode(".", $name), 0); if (is_null($value)) { return isset($config [$name[0]] [$name[1]]) ? $config [$name[0]][$name[1]] : null; } $config [$name[0]] [$name[1]] = $value; } if (is_array($name)) { $config = array_merge($config, array_change_key_case_d($name, 0)); return true; } } function L($name = null, $value = null) { static $languge = array(); if (is_null($name)) { return $languge; } if (is_string($name)) { $name = strtolower($name); if (!strstr($name, '.')) { if (is_null($value)) return isset($languge [$name]) ? $languge [$name] : null; $languge [$name] = $value; return $languge[$name]; } $name = array_change_key_case_d(explode(".", $name), 0); if (is_null($value)) { return isset($languge [$name[0]] [$name[1]]) ? $languge [$name[0]][$name[1]] : null; } $languge [$name[0]] [$name[1]] = $value; } if (is_array($name)) { $languge = array_merge($languge, array_change_key_case_d($name)); return true; } } function auto_load_system_file($className) { static $files = array(); if (is_array($className)) { $files = array_merge($files, array_change_key_case_d($className)); } else { $name = strtolower($className); return isset($files[$name]) ? $files[$name] : false; } } function tpl_compile($tplFile = null) { static $file = array(); if (is_null($tplFile)) return $file; $file[] = $tplFile; } function array_change_key_case_d($arr, $type = 0) { $function = $type ? 'strtoupper' : 'strtolower'; $newArr = array(); if (!is_array($arr) || empty($arr)) return $newArr; foreach ($arr as $k => $v) { $k = $function($k); if (is_array($v)) { $newArr[$k] = array_change_key_case_d($v, $type); } else { $newArr[$k] = $v; } } return $newArr; } function array_key_exists_d($key, $arr) { return array_key_exists(strtolower($key), array_change_key_case_d($arr)); } function array_change_value_case($arr, $type = 0) { $function = $type ? 'strtoupper' : 'strtolower'; $newArr = array(); foreach ($arr as $k => $v) { if (is_array($v)) { $newArr[$k] = array_change_value_case($v, $type); } else { $newArr[$k] = $function($v); } } return $newArr; } function php_merge($filenameArr, $toFile, $delSpace = false) { $saveDir = dirname($toFile); dir_create($saveDir); if (!is_array($filenameArr)) { $filenameArr = array($filenameArr); } $str = ''; $data = ''; foreach ($filenameArr as $file) { $data = trim(file_get_contents($file)); $data = substr($data, - 2) == '?>' ? $data : $data . "\t?>"; $str.= strip_space($data); } $str = '<?php if(!defined("PATH_HD")){exit("No direct script access allowed");}define("TEMP_FILE_EXISTS",1);?>' . $str; @file_put_contents($toFile, $str) || error($saveDir . "目录不可写,系统运行失败", false); return $str; } function strip_space($content) { $str = ""; $data = token_get_all($content); $end = false; for ($i = 0, $count = count($data); $i < $count; $i++) { if (is_string($data[$i])) { $end = false; $str.=$data[$i]; } else { switch ($data[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$end) { $end = true; $str.=" "; } break; case T_START_HEREDOC: $str.="<<<HDPHP\n"; break; case T_END_HEREDOC: $str.="HDPHP;\n"; for ($m = $i + 1; $m < $count; $m++) { if (is_string($data[$m]) && $data[$m] == ';') { $i = $m; break; } if ($data[$m] == T_CLOSE_TAG) { break; } } break; default: $end = false; $str.=$data[$i][1]; } } } return $str; } function get_defines($name = "", $value = null, $type = 'user') { if ($name) { $const = get_defined_constants(); return defined($name) ? $const[$name] : $value; } $const = get_defined_constants(true); return $type === true ? $const : $const[$type]; } function throw_exception($msg, $type = "exceptionHD") { if (class_exists("exceptionHD")) { throw new $type($msg); } else { error($msg); } } function error($error, $showFile = true) { $exception = array(); $backtrace = debug_backtrace(); $exception ['message'] = "<b>[ERROR]</b> " . $error . "<br/>"; if ($showFile) { $exception['message'].="\t<b>[FILE]</b> " . $backtrace[0]['file'] . "<br/>"; $exception['message'].="\t<b>[LINE]</b> " . $backtrace[0]['line'] . "<br/>"; } log::write(strip_tags($exception['message'])); if (!C("DEBUG")) { $e['message'] = C("ERROR_MESSAGE") . "\t\t <span style='color:#666; font-weight:normal;'>
                    " . L("functions_error_debug") . "
                    </span>"; include C("ERROR_TPL"); exit; } $e ['message'] = $exception['message']; include (C("ERROR_TPL")); debug::show("app_start", "app_end"); exit; } function show($var) { echo "<pre>" . htmlspecialchars(print_r($var, true), ENT_QUOTES) . "</pre>"; } function p($var) { show($var); } function dump($var) { show($var); } function go($url, $time = 0, $msg = '') { $url = U($url); if (!headers_sent()) { $time == 0 ? header("Location:" . $url) : header("refresh:{$time};url={$url}"); exit($msg); } else { echo "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if ($time) exit($msg); } } function ip_get_client($type = 0) { return Ip::ipGetClient($type); } function ajax_request() { if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') return true; return false; } function addslashes_d($data) { if (is_string($data)) { return addslashes($data); } if (is_numeric($data)) { return $data; } if (is_array($data)) { $var = array(); foreach ($data as $k => $v) { if (is_array($v)) { $var[$k] = addslashes_d($v); continue; } else { $var[$k] = addslashes($v); } } return $var; } } function stripslashes_d($data) { if (empty($data)) { return $data; } elseif (is_string($data)) { return stripslashes($data); } elseif (is_array($data)) { $var = array(); foreach ($data as $k => $v) { if (is_array($v)) { $var[$k] = stripslashes_d($v); continue; } else { $var[$k] = stripslashes($v); } } return $var; } } function array_to_String($array, $level = 0) { if (!is_array($array)) { return "'" . $array . "'"; } $space = ''; for ($i = 0; $i <= $level; $i++) { $space.="\t"; } $arr = "Array\n$space(\n"; $c = $space; foreach ($array as $k => $v) { $k = is_string($k) ? '\'' . addcslashes($k, '\'\\') . '\'' : $k; $v = !is_array($v) && (!preg_match("/^\-?[1-9]\d*$/", $v) || strlen($v) > 12) ? '\'' . addcslashes($v, '\'\\') . '\'' : $v; if (is_array($v)) { $arr.="$c$k=>" . array_to_String($v, $level + 1); } else { $arr.="$c$k=>$v"; } $c = ",\n$space"; } $arr.="\n$space)"; return $arr; } if (!function_exists('json_encode')) { function json_encode($value) { $json = new json(); return $json->encode($value); } } if (!function_exists('json_decode')) { function json_decode($json_value, $bool = false) { $json = new json(); return $json->decode($json_value, $bool); } } function mobile_area($mob) { $mob = substr($mob, 0, 7); $dat = file_get_contents(PATH_HD_PLUGIN . "/dat/mobile.dat"); $string = strstr($dat, $mob); $num = strpos($string, "\n"); if (!$num) return false; $end = substr($string, 0, $num); list($a, $area) = explode(",", $end); $toCharset = C("charset"); if (preg_match("/utf8|utf-8/i", $toCharset)) { $toCharset = "UTF-8"; } return iconv("gbk", $toCharset, $area); } function __autoload($classname) { if (substr($classname, -7) == 'Control' && strlen($classname) > 7) { $classFile = PATH_APP . '/control/' . $classname . '.php'; } else { $classFile = PATH_HD . '/libs/class/' . $classname . '.class.php'; } if (C("USR_FILES." . $classname)) { $classFile = C("USR_FILES." . $classname); } load_file($classFile); } function extension_exists($ext) { $ext = strtolower($ext); $loaded_extensions = get_loaded_extensions(); return in_array($ext, array_change_value_case($loaded_extensions, 0)); } if (!function_exists('image_type_to_extension')) { function image_type_to_extension($type, $dot = true) { $e = array(1 => 'gif', 'jpeg', 'png', 'swf', 'psd', 'bmp', 'tiff', 'tiff', 'jpc', 'jp2', 'jpf', 'jb2', 'swc', 'aiff', 'wbmp', 'xbm'); $type = (int) $type; return ($dot ? '.' : '') . $e[$type]; } } function rand_str($len = 6) { $data = 'abcdefghijklmnopqrstuvwxyz0123456789'; $str = ''; while (strlen($str) < $len) $str.=substr($data, mt_rand(0, strlen($data) - 1), 1); return $str; } function encrypt($data, $key = null) { return encry::encrypt($data, $key); } function decrypt($data, $key = null) { return encry::decrypt($data, $key); } function tpl_format_attr($attr, $type = 1) { if (!is_array($attr)) $attr = array($attr); $userConsts = get_defined_constants(true); $const = array(); foreach ($userConsts['user'] as $k => $v) { if (!strstr($k, '__')) continue; $const[$k] = $v; } $vars = hdView::$vars; foreach ($attr as $k => $at) { switch ($type) { case 1: $attr[$k] = preg_replace('/\$\w+\[.*\](?!=\[)|\$\w+(?!=[a-z])/', '<?php echo \0;?>', $attr[$k]); break; case 2: break; } foreach ($const as $constName => $constValue) { $attr[$k] = str_replace($constName, $constValue, $attr[$k]); } } return $attr; } function _default($varName, $value = "") { return isset($varName) ? $varName : $value; } function _request($method, $varName = null, $html = true) { $method = strtolower($method); switch ($method) { case 'ispost' : case 'isget' : case 'ishead' : case 'isdelete' : case 'isput' : return strtolower($_SERVER['REQUEST_METHOD']) == strtolower(substr($method, 2)); case 'get' : $data = & $_GET; break; case 'post' : $data = & $_POST; break; case 'request' : $data = & $_REQUEST; break; case 'session' : $data = & $_SESSION; break; case 'cookie' : $data = & $_COOKIE; break; case 'server' : $data = & $_SERVER; break; case 'globals' : $data = & $GLOBALS; break; default: throw_exception('abc'); } if (is_null($varName)) return $data; if (isset($data[$varName]) && $html) { $data[$varName] = htmlspecialchars($data[$varName]); } return isset($data[$varName]) ? $data[$varName] : null; } function _404($msg = "", $url = "") { if (empty($msg)) $msg = '页面找不到'; C("DEBUG") && throw_exception($msg); Log::write($msg); if (empty($url) && C("ERROR_404")) { $url = C("ERROR_404"); } if ($url) { go($url, $msg); } else { set_http_state(404); } exit; } function set_http_state($code) { $state = array( 200 => 'OK', 301 => 'Moved Permanently', 302 => 'Moved Temporarily ', 400 => 'Bad Request', 403 => 'Forbidden', 404 => 'Not Found', 500 => 'Internal Server Error', 503 => 'Service Unavailable', ); if (isset($state[$code])) { header('HTTP/1.1 ' . $code . ' ' . $state[$code]); header('Status:' . $code . ' ' . $state[$code]); } } function is_ssl() { if (isset($_SERVER['HTTPS']) && ('1' == $_SERVER['HTTPS'] || 'on' == strtolower($_SERVER['HTTPS']))) { return true; } elseif (isset($_SERVER['SERVER_PORT']) && ('443' == $_SERVER['SERVER_PORT'] )) { return true; } return false; } function print_const() { $const = get_defined_constants(true); p($const['user']); } ?><?php
if (!defined("PATH_HD")) exit('No direct script access allowed'); class HDPHP { function __construct() { if (method_exists($this, '__init')) { $this->__init(); } } public function __get($var) { return isset($this->$var) ? $this->$var : NULL; } public function __set($var, $value) { if (property_exists($this, $var)) { $this->$var = $value; } } public function __call($method, $args) { if (method_exists($this, $method)) { $this->$method($args); } } } ?><?php
 if (!defined("PATH_HD")) exit('No direct script access allowed'); class Control extends HDPHP { protected $view = null; private $rbac; protected $error; function __init() { if (method_exists($this, "__auto")) { $this->__auto(); } } public function __call($method, $args) { if (strcasecmp($method, METHOD) == 0) { if (auto_load_system_file($method)) { include auto_load_system_file($method); } elseif (method_exists($this, "_empty")) { $this->_empty($args); } else { _404("控制器中不存在方法" . $method); } } elseif (substr(ucfirst($method), -5) == "Model") { if (strstr($method, '_')) { $method = str_replace("_", "/", substr($method, 0, -5)); return $this->kmodel($method); } else { return $this->kmodel(substr($method, 0, -5)); } } else { switch (strtolower($method)) { case 'ispost' : case 'isget' : case 'ishead' : case 'isdelete' : case 'isput' : return strtolower($_SERVER['REQUEST_METHOD']) == strtolower(substr($method, 2)); case '_get' : $data = & $_GET; break; case '_post' : $data = & $_POST; break; case '_request' : $data = & $_REQUEST; break; case '_session' : $data = & $_SESSION; break; case '_cookie' : $data = & $_COOKIE; break; case '_server' : $data = & $_SERVER; break; case '_globals' : $data = & $GLOBALS; break; default: throw_exception($method . '方法不存在'); } if (!isset($args[0])) { return $data; } elseif (isset($data[$args[0]])) { $value = $data[$args[0]]; $filterFunc = isset($args[1]) ? $args[1] : C("FILTER_FUNCTION"); $funcArr = explode(",", $filterFunc); if ($funcArr) { foreach ($funcArr as $func) { if (!function_exists($func)) continue; $value = is_array($value) ? array_map($func, $value) : $func($value); } return $value; } }elseif (isset($args[2])) { return isset($args[2]) ? $args[2] : NULL; } } } public function model($tableName = null, $full = null) { return M($tableName, $full); } public function kmodel($model) { return K($model); } protected function getViewObj() { if (is_null($this->view)) { $this->view = viewFactory::factory(); } } public function display($tplFile = "", $cacheTime = null, $contentType = "text/html", $charset = "", $show = true) { $this->getViewObj(); return $this->view->display($tplFile, $cacheTime, $contentType, $charset, $show); } public function fetch($tplFile = "", $cacheTime = null, $contentType = "text/html", $charset = "", $show = true) { $this->getViewObj(); return $this->view->fetch($tplFile, $cacheTime, $contentType, $charset, $show); } public function isCache() { $args = func_get_args(); $this->getViewObj(); return call_user_func_array(array($this->view,"isCache"), $args); } public function assign($name, $value) { $this->getViewObj(); $this->view->assign($name, $value); } public function error($msg = "", $url = "", $time = 2) { $msg = $msg ? $msg : L("control_error_msg"); $time = is_numeric($time) ? $time : 3; $this->assign("msg", $msg); if ($url == "") { $url = "window.history.back(-1);"; } else { $url = "window.location.href='" . U($url) . "'"; } $tplFile = 'error' . C("TPL_FIX"); $style = C('TPL_STYLE') ? '/' . C('TPL_STYLE') . '/' : '/'; $tpl_dir = C("TPL_DIR"); $tpl_dir = strstr($tpl_dir, '/') ? $tpl_dir . $style : PATH_APP . '/' . $tpl_dir . $style . 'public/'; $tpl = $tpl_dir . $tplFile; $this->assign("url", $url); $this->assign("time", $time); $this->display($tpl); exit; } public function success($msg = "", $url = "", $time = 2) { $msg = $msg ? $msg : L("control_success_msg"); $time = is_numeric($time) ? $time : 3; $this->assign("msg", $msg); if ($url == "") { $url = "window.history.back(-1);"; } else { $url = "window.location.href='" . U($url) . "'"; } $tplFile = C("SUCCESS_TPL") ? C("SUCCESS_TPL") : 'success' . C("TPL_FIX"); $style = C('TPL_STYLE') ? '/' . C('TPL_STYLE') . '/' : '/'; $tpl_dir = C("TPL_DIR"); $tpl_dir = strstr($tpl_dir, '/') ? $tpl_dir . $style : PATH_APP . '/' . $tpl_dir . $style . 'public/'; $tpl = $tpl_dir . $tplFile; $this->assign("url", $url); $this->assign("time", $time); $this->display($tpl); exit; } } ?><?php
 if (!defined("PATH_HD")) exit('No direct script access allowed'); final class DbFactory { public static $dbFactory = null; protected $driverList = array(); private function __construct() { } public static function factory($driver = null, $tableName = null) { if (is_null(self::$dbFactory)) { self::$dbFactory = new dbFactory(); } if (is_null($driver)) { $driver = ucfirst(strtolower(C("DB_DRIVER"))); } if (is_null($tableName)) { $tableName = 'empty'; } if (isset(self::$dbFactory->driverList[$tableName])) { return self::$dbFactory->driverList[$tableName]; } self::$dbFactory->getDriver($driver, $tableName); return self::$dbFactory->driverList[$tableName]; } private function getDriver($driver, $tableName) { $class = $driver . 'Driver'; $classFile = PATH_HD . '/libs/driver/db/driver/' . $class . '.class.php'; load_file($classFile); $this->driverList[$tableName] = new $class; $table = $tableName == 'empty' ? null : $tableName; $this->driverList[$tableName]->connect($table); } private function close() { foreach ($this->driverList as $db) { $db->close(); } } function __destruct() { $this->close(); } } ?><?php
 if (!defined("PATH_HD")) exit('No direct script access allowed'); interface DbInterface { public function getLink(); public function close(); public function exe($sql); public function query($sql); public function getInsertId(); public function getAffectedRows(); public function getVersion(); public function autocommit($opt); public function commit(); public function rollback(); } ?><?php
 if (!defined("PATH_HD")) exit('No direct script access allowed'); class Model extends HDPHP { protected $tableFull; protected $table; public $tableName; public $field; public $join = array(); public $db; public $data = array(); public $validate = null; public $error; public $map = array(); public function __construct($table = null, $full = null, $driver = null) { $this->tableName = $this->getTable($table, $full); $this->db = dbFactory::factory($driver, $this->tableName); } public function __set($var, $value) { $var = strtolower($var); if (in_array($var, array('view', 'join'))) { return; } $property = array_keys($this->db->opt); if (in_array($var, $property)) { $this->$var($value); } else { $this->data[$var] = $value; } } protected function fieldMap($data = null) { if (empty($this->map)) { return $data; } foreach ($this->map as $k => $v) { if (isset($_POST[$k])) { $_POST[$v] = $_POST[$k]; unset($_POST[$k]); } if ($this->validate) { foreach ($this->validate as $valiName => $valiValue) { if ($valiValue[0] == $k) { $this->validate[$valiName][0] = $v; } } } if ($data) { if (isset($data[$k])) { $data[$v] = $data[$k]; unset($data[$k]); } } } return $data; } public function __call($func, $args) { if (!method_exists($this, $func)) { error(L("model__call_error") . $func, false); } } protected function getArgs($args) { if (is_object($args) && property_exists($args, 'data')) { $args = array($args->data); $this->data = array(); } if (empty($args) && !empty($this->data)) { $args = array($this->data); $this->data = array(); } return $args; } protected function getTable($table = null, $full = false) { if (is_null($table)) { $table = null; } elseif (!empty($this->tableFull)) { $table = $this->tableFull; } elseif (!empty($this->table)) { $table = C("DB_PREFIX") . $this->table; } elseif (!empty($table)) { if ($full == true) { $table = $table; } else { $table = C("DB_PREFIX") . $table; } } else { $table = C("DB_PREFIX") . CONTROL; } return $table; } public function table($table, $full = false) { if (!$full) { $table = C("DB_PREFIX") . $table; } $this->db->table($table); return $this; } public function field() { $opt = func_get_args(); if (empty($opt)) return $this; call_user_func(array($this->db, __FUNCTION__), $opt); return $this; } public function where() { $opt = $this->getArgs(func_get_args()); if (empty($opt)) return $this; call_user_func(array($this->db, __FUNCTION__), $opt); return $this; } public function cache() { $opt = func_get_args(); call_user_func(array($this->db, __FUNCTION__), $opt); return $this; } public function like() { $opt = $this->getArgs(func_get_args()); if (empty($opt)) return $this; call_user_func(array($this->db, __FUNCTION__), $opt); return $this; } public function group() { $opt = $this->getArgs(func_get_args()); if (empty($opt)) return $this; call_user_func(array($this->db, __FUNCTION__), $opt); return $this; } public function having() { $opt = $this->getArgs(func_get_args()); if (empty($opt)) return $this; call_user_func(array($this->db, __FUNCTION__), $opt); return $this; } public function order() { $opt = $this->getArgs(func_get_args()); if (empty($opt)) return $this; call_user_func(array($this->db, __FUNCTION__), $opt); return $this; } public function limit() { $opt = $this->getArgs(func_get_args()); if (empty($opt)) return $this; call_user_func(array($this->db, __FUNCTION__), $opt); return $this; } public function in() { $opt = $this->getArgs(func_get_args()); if (empty($opt)) return $this; call_user_func(array($this->db, __FUNCTION__), $opt); return $this; } public function del() { $opt = $this->getArgs(func_get_args()); return call_user_func_array(array($this, 'delete'), $opt); } public function delall() { $opt = $this->getArgs(func_get_args()); $this->db->where('1=1'); return call_user_func_array(array($this, 'delete'), $opt); } public function delete() { $opt = $this->getArgs(func_get_args()); return call_user_func(array($this->db, __FUNCTION__), $opt); } public function query() { $opt = $this->getArgs(func_get_args()); return call_user_func_array(array($this->db, __FUNCTION__), $opt); } public function exe() { $opt = func_get_args(); return call_user_func_array(array($this->db, 'exe'), $opt); } public function find() { if (!$this->db->opt['limit']) { $this->db->opt['limit'] = " LIMIT 1 "; } $opt = func_get_args(); $result = call_user_func_array(array($this, 'select'), $opt); return $result ? current($result) : $result; } public function one() { $opt = $this->getArgs(func_get_args()); return call_user_func_array(array($this, 'find'), $opt); } public function findall() { $opt = $this->getArgs(func_get_args()); return call_user_func_array(array($this, 'select'), $opt); } public function all() { $opt = $this->getArgs(func_get_args()); return call_user_func_array(array($this, 'select'), $opt); } public function select() { $opt = $this->getArgs(func_get_args()); return call_user_func(array($this->db, __FUNCTION__), $opt); } public function save() { $opt = $this->getArgs(func_get_args()); return call_user_func_array(array($this, 'update'), $opt); } public function update() { if ($this->validate() === false) { return false; } $opt = $this->getArgs(func_get_args()); if (empty($opt)) { if (!empty($_POST)) { $opt = array($_POST); } else { error(L("model_update_error"), false); } } return call_user_func(array($this->db, __FUNCTION__), $opt); } public function insert() { $args = func_get_args(); $data = $this->getArgs(current($args)); if (empty($data)) { if (!empty($_POST)) { $data = array($_POST); } else { error(L("model_insert_error"), false); } } $mapData = $this->fieldMap($data); $this->validate($mapData); if ($this->validate($mapData) === false) { return false; } $type = array_pop($args) == 'replace' ? "replace" : "insert"; return call_user_func(array($this->db, __FUNCTION__), $mapData, $type); } public function replace() { $data = current(func_get_args()); return call_user_func(array($this, "insert"), $data, "replace"); } public function add() { $opt = $this->getArgs(func_get_args()); return call_user_func_array(array($this, 'insert'), $opt); } public function max() { if (method_exists($this, "getJoin")) { $this->getJoin(); $this->joinModel = true; } $opt = $this->getArgs(func_get_args()); return call_user_func(array($this->db, __FUNCTION__), $opt); } public function min() { if (method_exists($this, "getJoin")) { $this->getJoin(); $this->joinModel = true; } $opt = $this->getArgs(func_get_args()); return call_user_func(array($this->db, __FUNCTION__), $opt); } public function avg() { if (method_exists($this, "getJoin")) { $this->getJoin(); $this->joinModel = true; } $opt = $this->getArgs(func_get_args()); return call_user_func(array($this->db, __FUNCTION__), $opt); } public function count() { if (method_exists($this, "getJoin")) { $this->getJoin(); $this->joinModel = true; } $opt = $this->getArgs(func_get_args()); return call_user_func(array($this->db, __FUNCTION__), $opt); } public function dropTable($opt) { $opt = $this->getArgs(func_get_args()); return call_user_func(array($this->db, __FUNCTION__), $opt); } public function inc() { $opt = $this->getArgs(func_get_args()); if (count($opt) != 3) { error("inc方法参数不正确，示例：\$db->dec('price','id=20',188)", false); } return call_user_func(array($this->db, __FUNCTION__), $opt); } public function fieldFilter() { $opt = $this->getArgs(current(func_get_args())); $opt = $opt ? $opt : $_GET; foreach ($opt as $k) return call_user_func(array($this->db, __FUNCTION__), $opt); } public function dec() { $opt = $this->getArgs(func_get_args()); if (count($opt) != 3) { error("DEC方法参数不正确，示例：\$db->dec('total','id=4',8)", false); } return call_user_func(array($this->db, __FUNCTION__), $opt); } public function getAffectedRows() { return $this->db->getAffectedRows(); } public function getInsertId() { return $this->db->getInsertId(); } public function getLastSql() { return $this->db->getLastSql(); } public function getAllSql() { return $this->db->getAllSql(); } public function getVersion() { return $this->db->getVersion(); } public function createDatabase() { $opt = $this->getArgs(func_get_args()); return call_user_func_array(array($this->db, __FUNCTION__), $opt); } public function getSize() { $opt = $this->getArgs(func_get_args()); return call_user_func(array($this->db, __FUNCTION__), $opt); } public function getTableInfo() { $opt = $this->getArgs(func_get_args()); return call_user_func(array($this->db, __FUNCTION__), $opt); } public function truncate() { $opt = $this->getArgs(func_get_args()); return call_user_func(array($this->db, __FUNCTION__), $opt); } public function optimize() { $opt = $this->getArgs(func_get_args()); return call_user_func(array($this->db, __FUNCTION__), $opt); } public function repair($opt) { $opt = $this->getArgs(func_get_args()); return call_user_func(array($this->db, __FUNCTION__), $opt); } public function autocommit() { $opt = $this->getArgs(func_get_args()); return call_user_func(array($this->db, __FUNCTION__), $opt); } public function rename() { $opt = $this->getArgs(func_get_args()); return call_user_func(array($this->db, __FUNCTION__), $opt); } public function runSql() { $opt = $this->getArgs(func_get_args()); return call_user_func(array($this->db, __FUNCTION__), $opt); } public function commit() { $opt = $this->getArgs(func_get_args()); return call_user_func_array(array($this->db, __FUNCTION__), $opt); } public function rollback() { $opt = $this->getArgs(func_get_args()); return call_user_func_array(array($this->db, __FUNCTION__), $opt); } public function validate($data = null) { if ($data) { $_POST = array_merge($_POST, $data); } if (is_null($this->validate)) { return true; } if (!is_array($this->validate)) { error(L("model_validate_error"), false); } foreach ($this->validate as $v) { $type = isset($v[3]) ? $v[3] : 1; $name = $v[0]; $msg = $v[2]; switch ($type) { case 1: if (!isset($_POST[$name])) { continue 2; } break; case 2: if (!isset($_POST[$name])) { $this->error = $msg; return false; } break; case 3: if (!isset($_POST[$name]) || empty($_POST[$name])) { continue 2; } break; } $method = explode(":", $v[1]); $func = $method[0]; $args = isset($method[1]) ? str_replace(" ", '', $method[1]) : ''; if (method_exists($this, $func)) { $res = call_user_func_array(array($this, $func), array($name, $_POST[$name], $msg, $args)); if ($res === true) { continue; } $this->error = $res; return false; } elseif (function_exists($func)) { $res = $func($name, $_POST[$name], $msg, $args); if ($res === true) { continue; } $this->error = $res; return false; } else { $validate = new validate(); $func = '_' . $func; if (method_exists($validate, $func)) { $res = call_user_func_array(array($validate, $func), array($name, $_POST[$name], $msg, $args)); if ($res === true) { continue; } $this->error = $res; return false; } } } return true; } } ?><?php
 if (!defined("PATH_HD")) exit('No direct script access allowed'); abstract class SessionAbstract { abstract function open(); abstract function read($sid); abstract function write($sid, $data); abstract function destroy($sid); abstract function gc(); protected $sessionName; protected $sessionLifeTime; protected $sessionGcDivisor; protected $card; function __construct() { } public function init() { if (!ini_get("session.auto_start")) { @ini_set('session.use_trans_sid', 0); @ini_set('session.auto_start', 0); @ini_set('session.use_cookies', 1); } $this->setSessionName(); $this->setSessionId(); $this->sessionLifeTime = (int) C("SESSION_LIFTTIME"); $this->sessionGcDivisor = (int) C("SESSION_GC_DIVISOR"); $this->card = md5($_SERVER['REMOTE_ADDR'] . $_SERVER['HTTP_USER_AGENT']); session_set_save_handler( array($this, "open"), array($this, "close"), array($this, "read"), array($this, "write"), array($this, "destroy"), array($this, "gc") ); } protected function setSessionName() { $this->sessionName = C("SESSION_NAME") ? C("SESSION_NAME") : session_name(); session_name($this->sessionName); } protected function setSessionId() { if (isset($_GET[$this->sessionName])) { session_id($_GET[$this->sessionName]); } elseif (isset($_POST[$this->sessionName])) { session_id($_POST[$this->sessionName]); } } public function close() { if (mt_rand(1, $this->sessionGcDivisor) == 1) { $this->gc(); } return true; } } ?><?php
 if (!defined("PATH_HD")) exit('No direct script access allowed'); final class SessionFactory { public static $sessionFactory = null; protected $driver = array(); private function __construct() { } public static function factory() { if (is_null(self::$sessionFactory)) { self::$sessionFactory = new sessionFactory(); } $driver = ucfirst(strtolower(C("SESSION_ENGINE"))); if (isset(self::$sessionFactory->driver[$driver])) { return self::$sessionFactory->driver[$driver]; } self::$sessionFactory->getDriver($driver); return self::$sessionFactory->driver[$driver]; } private function getDriver($driver) { $class = ucfirst($driver) . 'Driver'; $classFile = PATH_HD . '/libs/driver/session/driver/' . $class . '.class.php'; load_file($classFile); $this->driver[$driver] = new $class; } } ?><?php
 if (!defined("PATH_HD")) exit('No direct script access allowed'); final class CacheFactory { public static $cacheFactory = null; protected $cacheList = array(); private function __construct() { } public static function factory($options) { $options = is_array($options) ? $options : array(); if (is_null(self::$cacheFactory)) { self::$cacheFactory = new cacheFactory(); } $driver = isset($options['driver']) ? $options['driver'] : C("CACHE_TYPE"); $_driver = ucwords(strtolower($driver)); if (isset(self::$cacheFactory->cacheList[$_driver])) { return self::$cacheFactory->cacheList[$_driver]; } $class = $_driver . 'Cache'; $classFile = PATH_HD_DRIVER . '/cache/driver/' . $class . '.class.php'; if (!load_file($classFile)) { throw_exception("缓存类型指定错误，不存在缓存驱动文件:" . $classFile); } $cacheObj = new $class($options); self::$cacheFactory->cacheList[$_driver] = $cacheObj; return self::$cacheFactory->cacheList[$_driver]; } } ?><?php
if (!defined("PATH_HD")) exit('No direct script access allowed'); interface CacheInterface{ public function set($name, $data, $time = null, $path = null); public function get($name, $path = null); public function del($name, $path = null); public function delall(); public function options();} ?><?php
 if (!defined("PATH_HD")) exit('No direct script access allowed'); final class ViewFactory { public static $viewFactory = ''; protected $driverList = array(); private function __construct() { } public static function factory($driver = null) { if (self::$viewFactory == '') { self::$viewFactory = new viewFactory(); } if (is_null($driver)) { $driver = ucfirst(strtolower(C("TPL_ENGINE"))); } if (isset(self::$viewFactory->driverList[$driver])) { return self::$viewFactory->driverList[$driver]; } self::$viewFactory->getDriver($driver); return self::$viewFactory->driverList[$driver]; } public function getDriver($driver) { if (isset($this->driverList[$driver])) { return $this->driverList[$driver]; } $class = $driver . "View"; $classFile = PATH_HD . '/libs/driver/view/driver/' . $class . '.class.php'; class_exists($class) || load_file($classFile); $this->driverList[$driver] = new $class(); } private function close() { foreach ($this->driverList as $db) { $db->close(); } } function __destruct() { $this->close(); } } ?><?php
 if (!defined("PATH_HD")) exit('No direct script access allowed'); abstract class View extends HDPHP { protected function getTemplateFile($tplFile) { if (count(explode("/", $tplFile)) > 2) { if (!is_file($tplFile)) { throw_exception(L("view_getTemplateFile_error3") . $tplFile); } return $tplFile; } $tplFix = C("TPL_FIX") ? '.' . trim(C("TPL_FIX"), '.') : ''; $tplFile = str_replace(C("PATHINFO_HTML"), '', $tplFile); $tplFile = empty($tplFile) ? (C("METHOD_HTML") ? C("METHOD_HTML") : METHOD) : $tplFile; $tplFile.=$tplFix; if (strstr(C("TPL_DIR"), '/') && !strstr($tplFile, '/')) { $tplFile = PATH_TPL . '/' . $tplFile; } else { $fileArr = explode("/", $tplFile); $file = array_pop($fileArr); switch (count($fileArr)) { case 0: $control = C("CONTROL_HTML") ? C("CONTROL_HTML") : CONTROL; $tplFile = PATH_TPL . '/' . $control . '/' . $tplFile; break; case 1: $tplFile = PATH_TPL . '/' . $fileArr[0] . '/' . $file; break; case 2: $tplFile = str_replace(APP, $fileArr[0], PATH_TPL) . '/' . $fileArr[1] . '/' . $file; break; } } if (!is_file($tplFile)) { throw_exception(L("view_getTemplateFile_error3") . $tplFile); } return $tplFile; } } ?><?php
 if (!defined("PATH_HD")) exit('No direct script access allowed'); final class HdView extends View { static public $vars = array(); public $tplFile; private $compileFile; public function display($tplFile = "", $cacheTime = null, $contentType = "text/html", $charset = "", $show = true) { $this->tplFile = $this->getTemplateFile($tplFile); $this->compileFile = PATH_TEMP_COMPILE . '/' . md5_d($this->tplFile) . '.php'; if (C("debug")) { tpl_compile(array(basename($this->tplFile), $this->compileFile)); } $_cacheTime = is_null($cacheTime) ? C("CACHE_TPL_TIME") : $cacheTime; $cacheTime = is_int($_cacheTime) ? $_cacheTime : Null; $content = false; if ($cacheTime) { $content = S($_SERVER['REQUEST_URI'], false, null, array("dir" => PATH_TEMP_TPL_CACHE, "driver" => "File")); } if (!$content) { if ($this->checkCompile($tplFile)) { $this->compile(); } $_CONFIG = C(); $_LANGUAGE = L(); if (!empty(self::$vars)) { extract(self::$vars); } ob_start(); include($this->compileFile); $content = ob_get_clean(); if (!is_null($cacheTime)) { is_dir(PATH_TEMP_TPL_CACHE) || dir_create(PATH_TEMP_CACHE); S($_SERVER['REQUEST_URI'], $content, $cacheTime, array("dir" => PATH_TEMP_TPL_CACHE, "driver" => "File")); } } if ($show) { $charset = strtoupper(C("CHARSET")) == 'UTF8' ? "UTF-8" : strtoupper(C("CHARSET")); if (!headers_sent()) { header("Content-type:" . $contentType . ';charset=' . $charset); } echo $content; } else { return $content; } } public function fetch($tplFile = "", $cacheTime = null, $contentType = "text/html", $charset = "") { return $this->display($tplFile, $cacheTime, $contentType, $charset, false); } public function isCache() { return S($_SERVER['REQUEST_URI'], false, null, array("dir" => PATH_TEMP_TPL_CACHE, "driver" => "File")) ? true : false; } private function checkCompile() { $tplFile = $this->tplFile; $compileFile = $this->compileFile; return !file_exists($compileFile) || (filemtime($tplFile) > filemtime($compileFile)) || (C("DEBUG") && C("ALWAYS_COMPILE_TPL")); } public function compile() { if (!$this->checkCompile()) return; load_file(PATH_HD . '/libs/driver/view/hd/Compile.class.php'); $assignVar = array_keys(self::$vars); $compileObj = new compile($this->tplFile, $this->compileFile, $assignVar); $compileObj->run(); } public function getCompileContent() { return file_get_contents($this->compileFile); } public function assign($var, $value) { self::$vars[$var] = $value; } function __set($name, $value) { if (isset(self::$vars[$name])) { self::$vars[$name] = $value; } } } ?>